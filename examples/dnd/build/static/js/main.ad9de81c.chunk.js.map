{"version":3,"sources":["stylablez/Palettes.ts","stylablez/editor/LayerEditor.tsx","stylablez/editor/EditLayersPanel.tsx","img/splash.png","stylablez/Work.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["palettes","useStyles","makeStyles","theme","createStyles","slider","width","sliderLabel","fontSize","LayerEditor","props","classes","layerIndex","dispatch","brightness","opacity","Typography","id","className","Slider","value","min","max","onChange","e","v","type","modifyBrightness","aria-labelledby","modifyOpacity","listItem","padding","margin","backgroundControl","marginTop","drawerContent","shownEditor","marginBottom","backgroundColor","transition","notShownEditor","notFocused","drawer","paddingTop","paddingLeft","layerEditor","position","top","paddingRight","focused","borderStyle","borderWidth","EditLayersPanel","compositionState","layers","paletteNames","palette","useState","setShownEditor","Drawer","anchor","variant","Autocomplete","name","event","newValue","paletteName","disableClearable","options","style","renderInput","params","TextField","label","FormControl","component","FormLabel","RadioGroup","aria-label","evt","target","FormControlLabel","control","Radio","List","map","layer","showEditorStyle","hideEditor","ListItem","onClick","ListItemIcon","ListItemText","primary","sourceId","styleMap","text","left","outerWrapper","compWrapper","height","noDragActive","dragActive","border","boxShadow","borderRadius","borderColor","img","dropZone","wrapper","bottom","reducer","state","action","getPalette","opacityLayer","newOpacityState","newBrightnessState","Error","initialState","getPaletteNames","Work","useReducer","backgroundColorValue","getHexForLabel","onDrop","useCallback","acceptedFiles","StylizAbleZ","buildStylizableLayers","useDropzone","noDragEventsBubbling","accept","getRootProps","isDragActive","isDragAccept","isDragReject","dragStyle","useMemo","ref","rootProps","RootRef","rootRef","Paper","elevation","length","layerHeight","layerWidth","src","splash","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad9de81c.chunk.js","sourcesContent":["import { PaletteList } from '@stylizablez/core'\n\nexport const palettes: PaletteList = {\n    \"palettes\": [\n        {\n            \"name\": \"classic\",\n            \"tone\": \"light\",\n            \"colors\": [\n                {\n                    \"tone\": \"lit\",\n                    \"hex\": \"#ffffff\",\n                    \"usage\": \"background\",\n                    \"palette\": \"prim\"\n                },\n                {\n                    \"tone\": \"mid\",\n                    \"hex\": \"#CCCCCC\",\n                    \"usage\": \"text\",\n                    \"palette\": \"scnd\"\n                },\n                {\n                    \"tone\": \"drk\",\n                    \"hex\": \"#150A48\",\n                    \"usage\": \"head\",\n                    \"palette\": \"acnt\"\n                }\n            ]\n        },\n        {\n            \"name\": \"warm\",\n            \"tone\": \"light\",\n            \"colors\": [\n                {\n                    \"tone\": \"lit\",\n                    \"hex\": \"#F5FA9A\",\n                    \"usage\": \"background\",\n                    \"palette\": \"prim\"\n                },\n                {\n                    \"tone\": \"drk\",\n                    \"hex\": \"#0D28F2\",\n                    \"usage\": \"text\",\n                    \"palette\": \"scnd\"\n                },\n                {\n                    \"tone\": \"lit\",\n                    \"hex\": \"#ffffff\",\n                    \"usage\": \"none\",\n                    \"palette\": \"acnt\"\n                }\n            ]\n        },\n        {\n            \"name\": \"helvNue\",\n            \"tone\": \"dark\",\n            \"colors\": [\n                {\n                    \"tone\": \"drk\",\n                    \"hex\": \"#262626\",\n                    \"usage\": \"background\",\n                    \"palette\": \"prim\"\n                },\n                {\n                    \"tone\": \"lit\",\n                    \"hex\": \"#d9d9d9\",\n                    \"usage\": \"text\",\n                    \"palette\": \"scnd\"\n                },\n                {\n                    \"tone\": \"lit\",\n                    \"hex\": \"#ffffff\",\n                    \"usage\": \"none\",\n                    \"palette\": \"acnt\"\n                }\n            ]\n        }\n    ]\n}\n","import React, {Dispatch} from 'react';\n\nimport {Slider, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface LayerEditorProps {\n    dispatch: Dispatch<any>;\n    brightness: number;\n    opacity: number;\n    layerIndex: number;\n}\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        slider: {\n            width: '100%'\n        },\n        sliderLabel: {\n            fontSize: 12\n        }\n    })\n);\n\nconst modifyOpacity = (dispatch: Dispatch<any>, layerIndex: number, value: number) => {\n    dispatch({\n        type: 'changeOpacity',\n        layerIndex: layerIndex,\n        value: value\n    })\n}\n\nconst modifyBrightness = (dispatch: Dispatch<any>, layerIndex: number, value: number) => {\n    dispatch({\n        type: 'changeBrightness',\n        layerIndex: layerIndex,\n        value: value\n    })\n}\n\nexport const LayerEditor = (props: LayerEditorProps) => {\n    const classes = useStyles();\n\n    const {layerIndex, dispatch, brightness, opacity} = props\n\n    return (\n        <div>\n            <Typography id=\"brightness-slider\" className={classes.sliderLabel}>\n                Brightness\n            </Typography>\n            <Slider\n                className={classes.slider}\n                value={brightness}\n                min={0}\n                max={100}\n                onChange={(e, v) => modifyBrightness(dispatch, layerIndex, v as number)}\n                aria-labelledby=\"brightness-slider\"/>\n            <Typography id=\"opacity-slider\" className={classes.sliderLabel}>\n                Opacity\n            </Typography>\n            <Slider\n                className={classes.slider}\n                value={opacity}\n                min={0}\n                max={100}\n                onChange={(e, v) => modifyOpacity(dispatch, layerIndex, v as number)}\n                aria-labelledby=\"opacity-slider\"/>\n        </div>\n    )\n}\n","import React, {Dispatch, useState} from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport Loupe from '@material-ui/icons/LoupeSharp';\nimport {\n    Drawer,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Radio,\n    RadioGroup\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {LayerEditor} from \"./LayerEditor\";\nimport {CompositionState} from \"../Work\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listItem: {\n            padding: 0,\n            margin: 0\n        },\n        backgroundControl: {\n            marginTop: 20\n        },\n        drawerContent: {\n            padding: 20\n        },\n        shownEditor: {\n            marginBottom: 98,\n            backgroundColor: '#EEEEEE',\n            transition: 'margin .2s ease-out'\n        },\n        notShownEditor: {\n            marginBottom: 0,\n            backgroundColor: '#EEEEEE',\n            transition: 'margin .2s ease-out'\n        },\n        notFocused: {\n            backgroundColor: '#FFFFFF'\n        },\n        drawer: {\n            paddingTop: 15,\n            paddingLeft: 8\n        },\n        layerEditor: {\n            width: 235,\n            backgroundColor: '#EEEEEE',\n            position: 'absolute',\n            top: 35,\n            paddingRight: 32,\n            paddingLeft: 32\n        },\n        focused: {\n            backgroundColor: '#EEEEEE',\n            borderStyle: 'solid',\n            borderWidth: '0 1px 1px 0'\n        }\n    })\n);\n\ninterface LayerEditorProps {\n    compositionState: CompositionState;\n    dispatch: Dispatch<any>;\n}\n\nexport const EditLayersPanel = (props: LayerEditorProps) => {\n    const {compositionState, dispatch} = props\n    const {layers, paletteNames, palette} = compositionState\n    const classes = useStyles();\n\n    const [shownEditor, setShownEditor] = useState(-1);\n\n    return (<Drawer\n            anchor='right'\n            variant=\"permanent\"\n            className={classes.drawer}>\n            <div className={classes.drawerContent}>\n            <Autocomplete\n                value={palette.name}\n                onChange={(event: any, newValue: string | null) => {\n                    dispatch({\n                        type: 'changePaletteName',\n                        paletteName: newValue as string\n                    });\n                }}\n                id=\"palette-selector\"\n                disableClearable={true}\n                options={paletteNames}\n                style={{ width: 300 }}\n                renderInput={(params) => <TextField {...params} label=\"Palette\" variant=\"outlined\" />}\n            />\n                <div className={classes.backgroundControl}>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Background</FormLabel>\n                        <RadioGroup aria-label=\"background\" name=\"background\" value={compositionState.backgroundColor} onChange={\n                            (evt) => (dispatch({\n                                type: 'changeBackgroundColor',\n                                backgroundColor: evt.target.value\n                            }))}>\n                            <FormControlLabel value=\"\" control={<Radio />} label=\"Transparent\" />\n                            <FormControlLabel value=\"prim\" control={<Radio />} label=\"Primary\" />\n                            <FormControlLabel value=\"scnd\" control={<Radio />} label=\"Secondary\" />\n                            <FormControlLabel value=\"acnt\" control={<Radio />} label=\"Accent\" />\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n            <List>\n                {\n                    layers.map((layer, layerIndex) => {\n                        const showEditorStyle = layerIndex === shownEditor ? classes.shownEditor : classes.notShownEditor\n                        const hideEditor = layerIndex !== shownEditor\n                        return <ListItem className={`${classes.listItem} ${showEditorStyle}`}\n                                         key={layerIndex}\n                                         onClick={() => {\n                                             setShownEditor(layerIndex);\n                                         }}>\n                            <ListItemIcon><Loupe/></ListItemIcon>\n                            <ListItemText primary={layer.sourceId} />\n                            <div className={classes.layerEditor} style={{opacity: hideEditor ? 0 : 1}}>\n                                <LayerEditor\n                                    brightness={(layer.styleMap.brightness || 100) as number}\n                                    opacity={(layer.styleMap.opacity || 100) as number}\n                                    layerIndex={layerIndex} dispatch={dispatch}/>\n                            </div>\n                        </ListItem>;\n                    })\n                }\n            </List>\n        </div>\n        </Drawer>\n    )\n\n}\n","export default __webpack_public_path__ + \"static/media/splash.d1c8c6b9.png\";","import React, {useCallback, useMemo, useReducer} from 'react';\n\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {useDropzone} from \"react-dropzone\";\nimport {Paper, RootRef} from \"@material-ui/core\";\nimport {\n    getPaletteNames,\n    Layer,\n    buildStylizableLayers,\n    Composite,\n    getPalette,\n    getHexForLabel,\n    Palette\n} from '@stylizablez/core'\nimport {palettes} from \"./Palettes\";\nimport {EditLayersPanel} from \"./editor/EditLayersPanel\";\nimport splash from '../img/splash.png'\n\nexport interface WorkProps {\n}\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        text: {\n            position: 'absolute',\n            left: 70\n        },\n        outerWrapper: {\n            position: 'absolute',\n            top: 100,\n            left: 60\n        },\n        compWrapper: {\n            width: 850,\n            height: 500,\n            position: 'relative'\n        },\n        noDragActive: {\n            backgroundColor: 'green'\n        },\n        dragActive: {\n            border: '1px solid',\n            padding: '10',\n            boxShadow: '5px 10px #88888850',\n            borderRadius: 5,\n            borderColor: '#88888850'\n        },\n        img: {\n            width: 400,\n            height: 330,\n            top: 184,\n            left: 264,\n            position: 'absolute'\n        },\n        dropZone: {\n            height: 150,\n            width: 245\n        },\n        wrapper: {\n            height: 500,\n            position: 'absolute',\n            top: 90,\n            bottom: 90,\n            left: 50,\n            width: 850,\n            borderRadius: 10,\n            borderColor: '#d6d4d4',\n            borderWidth: 10,\n            borderStyle: 'dashed',\n        }\n    })\n);\n\nconst reducer = (state: CompositionState, action: any) => {\n    switch (action.type) {\n        case 'changeBackgroundColor':\n            const newState = {...state, backgroundColor: action.backgroundColor};\n            return newState\n        case 'changePaletteName':\n            return {...state, palette: getPalette(palettes, action.paletteName)};\n        case 'changeOpacity':\n            // A copy must be made for the memoized react layer component to re-render\n            const opacityLayer: Layer = {...state.layers[action.layerIndex]}\n            opacityLayer.styleMap.opacity = action.value\n            const newOpacityState = {...state}\n            newOpacityState.layers[action.layerIndex] = opacityLayer\n            return newOpacityState\n        case 'changeBrightness':\n            // A copy must be made for the memoized react layer component to re-render\n            const layer: Layer = {...state.layers[action.layerIndex]}\n            layer.styleMap.brightness = action.value\n            const newBrightnessState = {...state}\n            newBrightnessState.layers[action.layerIndex] = layer\n            return newBrightnessState\n        case 'changeLayers':\n            return {...state, layers: action.layers};\n        default:\n            throw new Error();\n    }\n}\n\nexport interface CompositionState {\n    backgroundColor: 'prim' | 'scnd' | 'acnt';\n    palette: Palette;\n    paletteNames: string[];\n    layers: Layer[]\n}\n\nconst initialState: CompositionState = {\n    backgroundColor: 'prim',\n    palette: palettes.palettes[0],\n    paletteNames: getPaletteNames(palettes),\n    layers: []\n}\n\nexport const Work = (props: WorkProps)  => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    let backgroundColorValue = getHexForLabel(state.palette, state.backgroundColor);\n    const classes = useStyles();\n\n    const onDrop = useCallback((acceptedFiles: File[]) => {\n        const lenientFilenames = true\n        let StylizAbleZ = buildStylizableLayers(acceptedFiles, lenientFilenames);\n        dispatch({\n            type: 'changeLayers',\n            layers: StylizAbleZ\n        })\n    }, [])\n\n    const {\n        getRootProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        noDragEventsBubbling: true,\n        onDrop: onDrop,\n        accept: 'image/*'\n    })\n\n    const dragStyle = useMemo(() => {\n        if (isDragActive) {\n            return classes.dragActive\n        } else {\n            return classes.noDragActive\n        }\n    }, [\n        isDragActive,\n        isDragReject,\n        isDragAccept,\n        classes.dragActive,\n        classes.noDragActive\n    ]);\n\n    const {ref, ...rootProps} = getRootProps()\n\n    return (\n        <RootRef rootRef={ref}>\n            <Paper {...rootProps} elevation={0}>\n                <p className={classes.text}>Drag 'n' drop some image files below</p>\n                {state.layers.length > 0 ? <div className={classes.outerWrapper}>\n                        <div className={classes.compWrapper}><Composite\n                            backgroundColor={backgroundColorValue}\n                            layers={state.layers}\n                            layerHeight={500}\n                            layerWidth={800}\n                            palette={state.palette}\n                        /></div>\n                    </div>\n                    : <img src={splash} className={`${classes.img} ${dragStyle}`} alt={\"\"}/>\n                }\n                <div className={`${classes.wrapper}`}>\n                    <EditLayersPanel compositionState={state} dispatch={dispatch}/>\n                </div>\n            </Paper>\n        </RootRef>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {Work} from \"./stylablez/Work\";\n\nconst App = () => {\n\n    return (\n        <div className=\"App\">\n            <Work />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}